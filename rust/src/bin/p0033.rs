// Project Euler: Problem 33

euler::run_solver!(33);

fn solve() -> String {
    compute().to_string()
}

fn compute() -> i64 {
    use euler::math;

    let (a, b) = make_cands()
        .into_iter()
        .reduce(|x, y| (x.0 * y.0, x.1 * y.1))
        .unwrap();

    b / math::gcd(a, b)
}

fn make_cands() -> Vec<(i64, i64)> {
    use itertools::Itertools;

    // Note: This function check() assumes that a < b < c.
    fn check(a: i64, b: i64, c: i64) -> bool {
        9 * a * (c - b) == c * (b - a)
    }

    // The combinations generated by combinations() are expected to be output
    // in lexicographic order according to the order of the input iterables.
    (1_i64..10)
        .combinations(3)
        .filter(|v| check(v[0], v[1], v[2]))
        .map(|v| (v[0], v[1]))
        .collect()
}

#[cfg(test)]
mod tests {
    use super::compute;

    #[test]
    fn p0033() {
        assert_eq!(compute(), 100);
    }
}
