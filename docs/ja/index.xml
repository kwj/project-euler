<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project Euler 感想戦</title>
    <link>https://kwj.github.io/project-euler/ja/</link>
    <description>Recent content on Project Euler 感想戦</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 27 Dec 2021 07:11:46 -0800</lastBuildDate><atom:link href="https://kwj.github.io/project-euler/ja/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Problem 100</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-100/</link>
      <pubDate>Mon, 27 Dec 2021 07:11:46 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-100/</guid>
      <description>問題へのリンク  Arranged probability  感想 青いディスクを $a$ 枚、全てのディスクを $b$ 枚とする。問題文の定義より $P(BB) = a/b \cdot (a-1)/(b-1) = 1/2$、したがって
$$ \begin{aligned} \frac{a}{b} \cdot \frac{a-1}{b-1} &amp;amp;= \frac{1}{2} \\ 2a(a-1) &amp;amp;= b(b-1) \\ 2a^{2} - 2a &amp;amp;= b^{2} - b \\ 8a^{2} - 8a &amp;amp;= 4b^{2} - 4b \\ 2(4a^{2} - 4a) &amp;amp;= 4b^{2} - 4b \\ 2(2a - 1)^{2} - 2 &amp;amp;= (2b - 1)^{2} - 1 \\ (2b - 1)^{2} - 2(2a - 1)^{2} &amp;amp;= -2 + 1 \\ (2b - 1)^{2} - 2(2a - 1)^{2} &amp;amp;= -1 \end{aligned} $$</description>
    </item>
    
    <item>
      <title>Problem 99</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-99/</link>
      <pubDate>Mon, 27 Dec 2021 07:01:23 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-99/</guid>
      <description>問題へのリンク  Largest exponential  感想 対数をとって計算すれば比較は容易。底は 1 より大きければ何でも構わないが、 プログラミング言語に備わっている常用対数(底が10)を使うことにする。
一応、対数について補足。$\log m^{n} = n \log m$ であるので、 これを使って計算して比較する。</description>
    </item>
    
    <item>
      <title>Problem 98</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-98/</link>
      <pubDate>Mon, 27 Dec 2021 00:07:08 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-98/</guid>
      <description>問題へのリンク  Anagramic squares  感想 アナグラムになる単語をグループ化して抽出したものと平方数をマッピングして処理するだけの筈なのに、 実装を見直してみると何か不効率な方法でやっている。これも「やり直したい問題」リスト入り。</description>
    </item>
    
    <item>
      <title>Problem 97</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-97/</link>
      <pubDate>Sun, 26 Dec 2021 23:46:45 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-97/</guid>
      <description>問題へのリンク  Large non-Mersenne prime  感想 明記はしなかったですが、Problem 48 では Modular exponentiation に 記載されているバイナリ法を使って計算しました。ライブラリが冪剰余もサポートしていたのですが、 単に使っちゃうのも面白くなかったので。
それはさておき本問は多倍長の整数演算で冪剰余を使って素直に計算する だけであり、場合分けなどは一切ありません。
&amp;gt;&amp;gt;&amp;gt; (28433 * pow(2, 7830457, 10_000_000_000) + 1) % 10_000_000_000 上記 Python コードの pow(base,exp,mod) の箇所を自力でやるか、 言語側に任せるかの違いくらいです。</description>
    </item>
    
    <item>
      <title>Problem 96</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-96/</link>
      <pubDate>Sun, 26 Dec 2021 23:18:55 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-96/</guid>
      <description>問題へのリンク  Su Doku  感想 この手の問題はバックトラッキングが常套手段。そのため最初は後述するバックトラッキングを使わない 方針で実装して解いたものの、まったく汎用的じゃないのでバックトラッキングを使う別バージョンも 実装しました。
ただし普通に数字を埋める方式では面白くなかったので、Donald Knuth の Algorithm X による実装を 試して問題を解きました。
余談 上述のように 50 問すべて解けるまで解法テクニックを実装していく方針でプログラムを書いてみました。 これはこれで楽しかったのですが、テクニックを追加するたびにプログラムが複雑化して非常に疲れました。 きちんと設計すれば幾分マシだったかと思います。
話は変わって number place を数独と名前つけたのはニコリでしたが、不定期刊の頃に 「見つけたときが発売日」みたいな宣伝文句があったような覚えがある。デタラメな記憶かも しれないが、いま見ても強烈な文句だ。</description>
    </item>
    
    <item>
      <title>Problem 95</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-95/</link>
      <pubDate>Sun, 26 Dec 2021 23:04:03 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-95/</guid>
      <description>問題へのリンク  Amicable chains  感想 求める約数は Problem 21 で使った $d(n)$ を流用できる。チェーンを辿るのは Problem 14, 74 で似たようなことをやっているが、本問題で求めるチェーンは特定の 値に行き着くものではなくループする奴を探すので差異に注意が必要。
そのため既に辿った数字に関する情報も、これまでとは記録する内容が異なる。</description>
    </item>
    
    <item>
      <title>Problem 94</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-94/</link>
      <pubDate>Sun, 26 Dec 2021 20:12:15 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-94/</guid>
      <description>問題へのリンク  Almost equilateral triangles  感想 3 辺 $a,a,b$ で $b=a \pm 1$ とする。さらに $b$ を三角形の底辺とした時の高さを $c$ とする。 三平方の定理より
$$ \begin{aligned} a^{2} - (\frac{b}{2})^{2} = a^{2} - (\frac{a \pm 1}{2})^{2} &amp;amp;= c^{2} \\ 4a^{2} - (a \pm 1)^{2} &amp;amp;= 4c^{2} \\ 4a^{2} - (a^{2} \pm 2a + 1) &amp;amp;= 4c^{2} \\ 3a^{2} \mp 2a - 1 &amp;amp;= 4c^{2} \\ 9a^{2} \mp 6a - 3 &amp;amp;= 12c^{2} \\ (3a \mp 1)^{2} - 4 &amp;amp;= 12c^{2} \\ (\frac{3a \mp 1}{2})^{2} - 1 &amp;amp;= 3c^{2} \\ (\frac{3a \mp 1}{2})^{2} - 3c^{2} &amp;amp;= 1 \end{aligned} $$</description>
    </item>
    
    <item>
      <title>Problem 93</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-93/</link>
      <pubDate>Sun, 26 Dec 2021 20:05:03 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-93/</guid>
      <description>問題へのリンク  Arithmetic expressions  感想 eval が無いプログラミング言語の場合、逆ポーランド記法を 使って実装するのが一番簡単でしょうか。
 Infix notation and Reverse Polish notation case 1: IN: ((a1 OP1 a2) OP2 a3) OP3 a4 RPN: a1 a2 OP1 a3 OP2 a4 OP3 case 2: IN: (a1 OP1 (a2 OP2 a3)) OP3 a4 RPN: a1 a2 a3 OP2 OP1 a4 OP3 case 3: IN: (a1 OP1 a2) OP2 (a3 OP3 a4) RPN: a1 a2 OP1 a3 a4 OP3 OP2 case 4: IN: a1 OP1 ((a2 OP2 a3) OP3 a4) RPN: a1 a2 a3 OP2 a4 OP3 OP1 case 5: IN: a1 OP1 (a2 OP2 (a3 OP3 a4)) RPN: a1 a2 a3 a4 OP3 OP2 OP1 </description>
    </item>
    
    <item>
      <title>Problem 92</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-92/</link>
      <pubDate>Sun, 26 Dec 2021 19:54:15 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-92/</guid>
      <description>問題へのリンク  Square digit chains  感想 1000 万未満の全て数字が 1 回の変換で 3 桁になるし、 3 桁の数字は 1 回の変換で全て 243 以下になる。
 9^2 = 81 --&amp;gt; 99 -&amp;gt; 9^2 * 2 = 162 999 -&amp;gt; 9^2 * 3 = 243 9999 -&amp;gt; 9^2 * 4 = 324 99999 -&amp;gt; 9^2 * 5 = 405 999999 -&amp;gt; 9^2 * 6 = 486 9999999 -&amp;gt; 9^2 * 7 = 567 仮に 567 まであらかじめ調べてテーブルにしておけば、変換 1 回で最終結果が判明する。</description>
    </item>
    
    <item>
      <title>Problem 91</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-91/</link>
      <pubDate>Sun, 26 Dec 2021 19:45:02 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-91/</guid>
      <description>問題へのリンク  Right triangles with integer coordinates  感想 ケース分けして数え上げるだけ。
 直角が原点にある場合 直角が原点以外の X 軸にある場合 直角が原点以外の Y 軸にある場合 直角が第一象限にある場合  最後の第一象限にある場合だけは、数えるのに少し手間がかかる。</description>
    </item>
    
    <item>
      <title>Problem 90</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-90/</link>
      <pubDate>Sun, 26 Dec 2021 19:41:37 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-90/</guid>
      <description>問題へのリンク  Cube digit pairs  感想 問題文から幾つかの制約を読み取れるので、組み合わせを作って brute force するだけ。</description>
    </item>
    
    <item>
      <title>Problem 89</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problme-89/</link>
      <pubDate>Sun, 26 Dec 2021 19:35:27 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problme-89/</guid>
      <description>問題へのリンク  Roman numerals  感想 抜け漏れなく置換するだけ。問われているのは置換前後の文字数差であり 置換した後の文字は文字数さえ合っていれば何でも良いので、 複数の置換をまとめて指定できる。
独り言 IX と IV しか知らなかった。</description>
    </item>
    
    <item>
      <title>Problem 88</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-88/</link>
      <pubDate>Sun, 26 Dec 2021 16:36:56 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-88/</guid>
      <description>問題へのリンク  Product-sum numbers  感想 定義に従って $N(k) = a_1 + a_2 + \ldots + a_k = a_1 \cdot a_2 \cdot \ldots \cdot a_k$ とする。 まず $2 \le k \le 12000$ のとき $N(k)$ の最小値が取り得る範囲を確認する。
$k=2$ の時は問題文にあるように明らかに $N(k) = 2 + 2 = 2 \cdot 2 = 4$ のみ。
以下、$k&amp;gt;2$ とする。
$\sum_{i=1}^k a_n$ が最小になるのは $a_n=1 \: [1 \le n \le k]$ のケースであり、 この時は和と積が一致することはないので $N(k)$ になることはないが $N(k) \ge k$ は言える。
一方、${a_1, a_2, \ldots, a_{k-2}, a_{k-1}, a_k} = {1, 1, \ldots, 1, 2, k}$ という ケースを考えると、$\sum_{i=1}^k a_n = (k-2) + 2 + k = 2k$ で $\prod_{i=1}^k a_n = 1 \cdot 2 \cdot k = 2k$ なので $N(k)$ の条件を満たす。つまり $k&amp;gt;2$ なら $N(k) = 2k$ となる $a_n$ を作ることができるので、 $N(k)$ の最小値については $N(k) \le 2k$ が言える。</description>
    </item>
    
    <item>
      <title>Problem 87</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-87/</link>
      <pubDate>Sun, 26 Dec 2021 16:27:49 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-87/</guid>
      <description>問題へのリンク  Prime power triples  感想 ナイーブに三重ループを回す手段しか思い浮かばない。何か良い手はないかな。</description>
    </item>
    
    <item>
      <title>Problem 86</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-86/</link>
      <pubDate>Sun, 26 Dec 2021 15:41:24 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-86/</guid>
      <description>問題へのリンク  Cuboid route  感想 立方体の回転は無視するとのことなので、3 辺の長さ $1 \le a,b,c \le M$ は $1 \le a \le b \le c \le M$ とおくことができる。したがって、
$$ 2 \le a + b \le 2c $$
となる。下記に (S)pider と (F)ly を含む立方体の展開図(一部)を示す。
 +---------F | | |---------| | | a+b &amp;lt;= 2c | | S---------+ c 距離($S,F$)は $\sqrt{c^{2} + (a+b)^{2}}$ となり、問題文より これが整数でなければならない。
あとは $c$ を増やしながら条件を満たす $a,b,c$ の組を数え上げればよい。 なお数える際は $a+b=c$ を境に少し注意が必要になります。</description>
    </item>
    
    <item>
      <title>Problem 85</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-85/</link>
      <pubDate>Sun, 26 Dec 2021 14:56:13 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-85/</guid>
      <description>問題へのリンク  Counting rectangles  感想 例示されているグリッド(3x2)の場合、縦 4 本・横 3 本の線からそれぞれ 2 本ずつ 選び出して四角形を作っている。つまり四角形を決めることは組み合わせの問題です。
あとは組み合わせの式を決めて近似値を探すだけですが、近似値なので判断方法には 注意が必要です。</description>
    </item>
    
    <item>
      <title>Problem 84</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-84/</link>
      <pubDate>Sun, 26 Dec 2021 14:42:37 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-84/</guid>
      <description>問題へのリンク  Monopoly odds  感想 計算で確率を求めるのは力不足で無理なので、移動ルールを実装して乱数サイコロを 100 万回振ることによるモンテカルロ法で 確率の近似値を求めました。100 万という数字については十分に多い試行回数という 以外の意味はありません。</description>
    </item>
    
    <item>
      <title>Problem 83</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-83/</link>
      <pubDate>Sun, 26 Dec 2021 14:36:17 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-83/</guid>
      <description>問題へのリンク  Path sum: four ways  感想 自由に動けるが一回通った箇所は通れない迷路と一緒。
スタートとゴールは決められているから、各要素の値を要素への移動コストとしてグラフを作成し、 ダイクストラのアルゴリズムで解を求めた。</description>
    </item>
    
    <item>
      <title>Problem 82</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-82/</link>
      <pubDate>Sun, 26 Dec 2021 14:29:43 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-82/</guid>
      <description>問題へのリンク  Path sum: three ways  感想 今度は上下と右の三方向。スタートとゴールが決まっておらず前問の方法は使えない。 そこで Problem 18 や 67 でやった方式を応用する。
先の問題では三角形の底辺から畳み込んだが、今回は四角形の右側の辺から畳み込む。 左側の辺にまで来た時に最小の値の要素が求める解になる。</description>
    </item>
    
    <item>
      <title>Problem 81</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-81/</link>
      <pubDate>Sun, 26 Dec 2021 14:20:13 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-81/</guid>
      <description>問題へのリンク  Path sum: two ways  感想 右か下にしか動けないので、一番上の行を累積和にして 2 行目の各要素への最小移動コストを算出。 続いて 2 行目のデータをもとに 3 行目の各要素への最小移動コストを算出、これを最終行まで 繰り返すと、末尾の要素の値が求める最小移動コストになる。</description>
    </item>
    
    <item>
      <title>Problem 80</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-80/</link>
      <pubDate>Sun, 26 Dec 2021 13:37:54 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-80/</guid>
      <description>問題へのリンク  Square root digital expansion  感想 むかし習った開平法を実装して終了。 実装が面倒だったので、別手段を採用した方が良かったかもしれない。
例えば $\sqrt{n}$ に $10^{99}$ をかければ、小数点以下 99 桁部分が整数部に出てくる。 コンピュータ上では $\sqrt{n}$ から計算を始めると誤差が出てしまうので、整数 $n$ から 計算を始めれば良い。 つまり $n$ が 100 未満ならば下記の条件を満たす $i$ を求めれば 100 桁の数値として 答えが出るはず。もちろん多倍長な演算が必要になります。
$$ i \le 10^{99} \sqrt{n} &amp;lt; i + 1 \rightarrow i^2 \le 10^{198} \cdot n &amp;lt; (i+1)^2 $$
Python 3.8 から math.isqrt() が導入されたので試しました。 問題文に例示されている $\sqrt{2}$ の場合は正しい値を求めています。
&amp;gt;&amp;gt;&amp;gt; sum(map(int, list(str(math.isqrt(10**198 * 2))))) 475 内包表記を使えば一行野郎じゃなくて二行野郎で解が出せたので(math モジュールを import するのに 1 行必要)、 自然数の範囲(limit)と桁数(digit)はパラメータ化してみた。</description>
    </item>
    
    <item>
      <title>Problem 79</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-79/</link>
      <pubDate>Sun, 26 Dec 2021 13:34:39 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-79/</guid>
      <description>問題へのリンク  Passcode derivation  感想 紙と鉛筆で解ける問題ですが、数字の順番から可能性があるパスコードを特定するだけ。 トポロジカルソートに落とし込んで解いた方が面白かったかもしれません。</description>
    </item>
    
    <item>
      <title>Problem 78</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-78/</link>
      <pubDate>Sun, 26 Dec 2021 13:17:17 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-78/</guid>
      <description>問題へのリンク  Coin partitions  感想 これも前問と似たような問題かなと思ったら全く違うアプローチを要求された。 $p(n)$ を試算してみた結果が下記の通り。
p(5) = 7 p(10) = 42 p(50) = 204226 p(100) = 190569292 p(200) = 3972999029388 p(500) = 2300165032574323995027 p(1000) = 24061467864032622473692149727991 動的計画法でやってみたら値が爆発した上に終わりが見えなかったので、 別の方法を検討したものの自力では解けず、下記のページを参照して実装しました。
 Partition (number theory) Partition function (number theory) Pentagonal number theorem  ギブアップしたので、方法は上記を調べてください。
追記 Problem 76, 77 も Problem 78 の方式で処理するのだろうか？</description>
    </item>
    
    <item>
      <title>Problem 77</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-77/</link>
      <pubDate>Sun, 26 Dec 2021 13:09:14 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-77/</guid>
      <description>問題へのリンク  Prime summations  感想 引き続き、動的計画法(dynamic programming)で解けた問題。
この問題は前問のようにゴール(合計して作る数)が決められているのではなく、 ある数を作る組み合わせが 5000 通り以上になるときの数は何かなので、 ゴールを増やしつつ調べる必要がある。</description>
    </item>
    
    <item>
      <title>Problem 76</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-76/</link>
      <pubDate>Sun, 26 Dec 2021 13:03:29 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-76/</guid>
      <description>問題へのリンク  Counting summations  感想 Problem 31 でコインの問題を扱ったが、この問題も本質は同じ内容。
Problem 31 が 1, 2, 5, 10, 20, 50, 100, 200 から 200 を作ったのに対し、 こちらは 1 から 99 までの数字から 100 を作るだけ。</description>
    </item>
    
    <item>
      <title>Problem 75</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-75/</link>
      <pubDate>Sun, 26 Dec 2021 12:32:12 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-75/</guid>
      <description>問題へのリンク  Singular integer right triangles  感想 Problem 9 で扱ったピタゴラス数の性質を利用して $L \le 1,500,000$ の 範囲で全ての直角三角形を調べあげて、同じ $L$ で複数の直角三角形が無いもの の個数を数えて終了。
上記はナイーブな手段だけど、他に良い解法はないかな。</description>
    </item>
    
    <item>
      <title>Problem 74</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-74/</link>
      <pubDate>Sun, 26 Dec 2021 12:23:01 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-74/</guid>
      <description>問題へのリンク  Digit factorial chains  感想 Problem 14 で途中経過を記録したのと同様にメモ化しながら処理するだけ。 もちろん chain の定義は Problem 14 と違うので、そこは注意が必要。</description>
    </item>
    
    <item>
      <title>Problem 73</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-73/</link>
      <pubDate>Sun, 26 Dec 2021 12:18:30 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-73/</guid>
      <description>問題へのリンク  Counting fractions in a range  感想 三たび(以下略)。
分母 $d$ ごとに既約分数となる分子を数え上げる手段しか思い浮かばない。 何か良い手はないだろうか。</description>
    </item>
    
    <item>
      <title>Problem 72</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-72/</link>
      <pubDate>Sun, 26 Dec 2021 12:08:41 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-72/</guid>
      <description>問題へのリンク  Counting fractions  感想 引き続きファレイ数列の登場。
既約分数なので、分子と分母が互いに素である。ここで Problem 69, 70 で扱った トーシェント関数の定義を見直してみると解法が見えてきます。</description>
    </item>
    
    <item>
      <title>Problem 71</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-71/</link>
      <pubDate>Sun, 26 Dec 2021 12:01:11 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-71/</guid>
      <description>問題へのリンク  Ordered fractions  感想 またもや判らなくて調べました、ファレイ数列。
隣り合う項の間に次の項を生成する条件について記述されていたので、それを使うだけ。 それにしても知らないことだらけで気が滅入りそう。</description>
    </item>
    
    <item>
      <title>Problem 70</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-70/</link>
      <pubDate>Sun, 26 Dec 2021 11:49:36 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-70/</guid>
      <description>問題へのリンク  Totient permutation  感想 引き続きトーシェント関数の登場。
与えられた範囲についてトーシェント関数の計算結果を格納するテーブルを作ってしまえば、 あとは条件を満たす $n$ を探すだけ。</description>
    </item>
    
    <item>
      <title>Problem 69</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-69/</link>
      <pubDate>Sun, 26 Dec 2021 02:31:44 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-69/</guid>
      <description>問題へのリンク  Totient maximum  感想 書いていて恥ずかしくなりますが、無知蒙昧シリーズまたまた登場。 今度はオイラーのトーシェント関数。 証明を確認する元気が無かったので、定理をそのまま使わせてもらいました。
$$ \varphi(n) = n \prod_{\substack{p|n}}(1-\frac{1}{p}) $$
より
$$ \begin{aligned} n / \varphi(n) &amp;amp;= \frac{n}{n \prod_{\substack{p|n}}(1-\frac{1}{p})} \\ &amp;amp;= \frac{1}{\prod_{\substack{p|n}}(\frac{p-1}{p})} \\ &amp;amp;= \prod_{\substack{p|n}}(\frac{p}{p-1}) \end{aligned} $$
自然数 $m$ に対して $\frac{m}{m-1} &amp;gt; 1$、さらに 自然数 $m&amp;lt;n$ に対して $\frac{m}{m-1} &amp;gt; \frac{n}{n-1}$ なので、 ある $n \le N$ に対して $n / \varphi(n)$ を最大にする $n$ は素数 $p$ を小さい方から乗算していって $N$ を越えない最大値が 求める解答になる。</description>
    </item>
    
    <item>
      <title>Problem 68</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-68/</link>
      <pubDate>Sun, 26 Dec 2021 02:18:46 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-68/</guid>
      <description>問題へのリンク  Magic 5-gon ring  感想 Problem 43 と同様に紙と鉛筆で解ける問題。
問題文の条件から数字 10 は内部の 5 角形に存在していはいけないことが判るので、 プログラムで解くならば制約条件に加えてしらみ潰しにすれば良い。
下記は実装したプログラムのコメントから抜粋。
 &amp;lt;e1&amp;gt; a0 \ &amp;lt;e2&amp;gt; a1 a3 / \ / a8 a2 /\ / a9 a6-a4-a5 &amp;lt;e3&amp;gt; &amp;lt;e5&amp;gt; \ a7 &amp;lt;e4&amp;gt; list [a0; a1; a2; a3; a4; a5; a6; a7; a8; a9] - one of {a3, a5, a7, a9} is 10 - a0 &amp;lt; {a3, a5, a7, a9} - each lines (e1..e5) have same weight 順列で数字を埋めるパターンを生成して、上記の制約条件を満たすものを解の候補にした。</description>
    </item>
    
    <item>
      <title>Problem 67</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-67/</link>
      <pubDate>Sun, 26 Dec 2021 02:13:50 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-67/</guid>
      <description>問題へのリンク  Maximum path sum II  感想 Problem 18 の規模が大きくなった問題。既に Problem 18 で下から畳み込む解法を実装して いるので、単に対象データがプログラム埋め込みから外部ファイル読み込みに変わっただけで終了。</description>
    </item>
    
    <item>
      <title>Problem 66</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-66/</link>
      <pubDate>Sun, 26 Dec 2021 01:47:33 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-66/</guid>
      <description>問題へのリンク  Diophantine equation  感想 無知をさらけ出しますがペル方程式も知らなくて調べました。 方程式の解を求めるのに連分数が応用できるんですね。Problem 64, 65 の両方が本問題に深く関わっていたのですが、 最初に問題文を読んだときは全く思い至りませんでした。
$\sqrt{D}$ を連分数に展開するのに Problem 64 を、展開して求まる循環小数をもとにペル方程式の最小解を求めるのに Problem 65 を、両方の処理を合体させることで本問題が解けます。</description>
    </item>
    
    <item>
      <title>Problem 65</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-65/</link>
      <pubDate>Sat, 25 Dec 2021 14:11:38 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-65/</guid>
      <description>問題へのリンク  Convergents of e  感想 問題については例示されている 10 項を眺めて漸化式を思いついて解くことができたのですが、 せっかくなので連分数について調べた内容を記述して本問題の解決に帰着させます。 思いついた漸化式は本記事の末尾に書かれています。本記事は直感で浮かんだ式に対する 論理による解法の説明です。
$$ a_0 + \cfrac{b_1}{a_1 + \cfrac{b_2}{a_2 + \cfrac{b_3}{\ddots \cfrac{\ddots}{a_n + \cfrac{b_{n+1}}{\ddots}}}}} $$
という連分数に対して、
$$ A_0 = a_0 = \frac{x_0}{y_0}, \; A_1 = a_0 + \frac{b_1}{a_1} = \frac{x_1}{y_1}, \; A_2 = a_0 + \cfrac{b_1}{a_1 + \cfrac{b_2}{a_2}} = \frac{x_2}{y_2}, \; \dots $$
とする。このとき
$$ \begin{aligned} n=0 \rightarrow x_0 &amp;amp; = a_0 \\ y_0 &amp;amp; = 1 \\ n=1 \rightarrow x_1 &amp;amp; = a_{0}a_{1} + b_1 \\ y_1 &amp;amp; = a_1 \\ n=2 \rightarrow x_2 &amp;amp; = a_{0}a_{1}a_{2} + a_{0}b_{2} + a_{2}b_{1} \\ y_2 &amp;amp; = a_{1}a_{2} + b_{2} \end{aligned} $$</description>
    </item>
    
    <item>
      <title>Problem 64</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-64/</link>
      <pubDate>Sat, 25 Dec 2021 13:00:58 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-64/</guid>
      <description>問題へのリンク  Odd period square roots  感想 Problem 57 で触れたが連分数についてはよく知らなかったので大変だった。
$\sqrt{N} = \frac{\sqrt{N} + b_0}{c_0} = a_0 + \frac{1}{x_1} \enspace [b_0=0, c_0=1, a_0=\lfloor \frac{\sqrt{N} + b_0}{c_0} \rfloor]$ とすると 下記のように変形できる。
$$ \begin{aligned} x_1 &amp;amp; = \frac{c_0}{\sqrt{N} + (b_0 - a_{0}c_{0})} \\ &amp;amp; = \frac{c_{0} (\sqrt{N} - (b_0 - a_{0}c_{0}))}{N - (b_0 - a_{0}c_{0})^{2}} \\ &amp;amp; = \frac{\sqrt{N} + (a_{0}c_{0} - b_0)}{\frac{N - (b_0 - a_{0}c_{0})^{2}}{c_0}} \end{aligned} $$
ここで $b_{1} = a_{0}c_{0} - b_0, c_{1} = \frac{N - (b_0 - a_{0}c_{0})^{2}}{c_0}$ と置くと</description>
    </item>
    
    <item>
      <title>Problem 63</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-63/</link>
      <pubDate>Sat, 25 Dec 2021 11:43:57 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-63/</guid>
      <description>問題へのリンク  Powerful digit counts  感想 $m&amp;gt;0,n&amp;gt;0$ として $m^n$ は n 桁とのことなので、 $$ \begin{aligned} n-1 &amp;amp; \le \log_{10}m^{n} &amp;lt; n \\ n-1 &amp;amp; \le n \cdot \log_{10}m &amp;lt; n \\ \end{aligned} $$
$n \cdot \log_{10}m &amp;lt; n$ から $$ m &amp;lt; 10 $$
同様に $n-1 \le n \cdot \log_{10}m$ から
$$ \begin{aligned} \frac{n-1}{n} &amp;amp; \le \log_{10}m \\ log_{10}10^{\frac{n-1}{n}} &amp;amp; \le \log_{10}m \\ 10^{\frac{n-1}{n}} &amp;amp; \le m \end{aligned} $$
$10^{\frac{n-1}{n}}$ は単調増加なので、$0&amp;lt;m&amp;lt;10$ の範囲内で $10^{\frac{n-1}{n}} \le m$ となる $n$ を数え上げて終了。</description>
    </item>
    
    <item>
      <title>Problem 62</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-62/</link>
      <pubDate>Sat, 25 Dec 2021 11:29:28 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-62/</guid>
      <description>問題へのリンク  Cubic permutations  感想 3 乗した数の各桁の数字をソートしたものをキーとして、同一のキーに 5 個の 3 乗数が登場するまで捜索。ただし問題文は最小の数を求めよと あるので、これまで同様に終了条件を動的に再設定して必要な範囲を捜索して 最小値を確定する。</description>
    </item>
    
    <item>
      <title>Problem 61</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-61/</link>
      <pubDate>Sat, 25 Dec 2021 10:46:27 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-61/</guid>
      <description>問題へのリンク  Cyclical figurate numbers  感想 Problem 60 に引き続き面倒くさかった問題、の筈だが自分でも何を考えてロジックを 実装したのか後からソースを読んでもすぐに理解できなかった。
対象となる三角数から八角数のうち 4 桁のものをすべて洗い出し、繋がりを確認しやすいよう 上位 2 桁と下位 2 桁に分割した形式にしてマスターのデータとして保持している。 このデータに対して、3 から 8 までの 6 個の数字からなる順列を辿るパターンとして 該当するサイクルが存在するか調査していた。
答えは一つしか無いと問題文にあるのに順列を全調査しているなど、我ながら何を やっているのだかと反省しきり。
感想 明日の自分は他人。 他人が保守できないようなロジックは採用してはいけない。 Problem 60 で疲れていたのか、思考力がかなり落ちていた模様。
本問は素直に解くだけの筈なので、リスト「やり直したい問題」入り。</description>
    </item>
    
    <item>
      <title>Problem 60</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-60/</link>
      <pubDate>Sat, 25 Dec 2021 09:56:42 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-60/</guid>
      <description>問題へのリンク  Prime pair sets  感想 最初は素数を頂点としてペアとなる素数を結ぶ辺からなる無向グラフから 大きさ 5 のクリークを探すことを考えた。確認はしていないが疎なグラフに なりそうなのでクリークを求める処理でもいけるかもと感じたが、 無向グラフ自体が成長する(素数が増える)ことから相当面倒くさい雰囲気がしたため 別アプローチを採用した。
素数を追加する際に、既に追加された素数からペアになる素数を洗い出して紐づける。 つまり自分より小さい素数とのペア情報のみ所持する。この時、ペアの個数が 4 以上の 場合に求めるクリークが出来ているか否かをチェックするようにした。
大きさ 5 のクリークが見つかったとして、これが求めるクリーク(属する素数の和が最小)か 否かはさらに調べないと判断できない。そのため Problem 44 における力技と同様に、 見つかったクリークから捜索範囲の上限を再設定して範囲内を調べ上げる必要があった。 最初のクリークが見つかる前後で処理を変えるのはプログラムの構造が複雑化するので、 Problem 44 の力技と同じように上限の初期値は整数の最大値として処理は一本化した。
拙いアルゴリズムのせいか、処理時間は結構かかり Raspberry Pi 4 Model B で 10 秒弱必要だった。
$ time ./p0060 Answer: [*** censored ***] ./p0060 8.74s user 0.11s system 99% cpu 8.885 total 最後に 別アプローチでも面倒だった。</description>
    </item>
    
    <item>
      <title>Problem 59</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-59/</link>
      <pubDate>Sat, 25 Dec 2021 09:49:57 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-59/</guid>
      <description>問題へのリンク  XOR decryption  感想 brute force で復号化するのは良いのだが、復号結果がまともな平文であることの判定が難しい。 common English words を含むとのことなので、頻出するだろうという適当な英単語を幾つか選んで 数え上げるという原始的な手法で対応したが、結果オーライな感じが拭えなくて気持ち悪い。
XOR による符号化に使っていた鍵は少し笑いました。</description>
    </item>
    
    <item>
      <title>Problem 58</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-58/</link>
      <pubDate>Sat, 25 Dec 2021 09:41:35 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-58/</guid>
      <description>問題へのリンク  Spiral primes  感想 Problem 28 で同様の問題を扱ったが、この四角形は平方数になるので右下に位置する項は 素数にはならない。残りの 3 箇所の隅について素直に素数か否かを判定して素数の割合を 確認していくだけ。</description>
    </item>
    
    <item>
      <title>Problem 57</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-57/</link>
      <pubDate>Sat, 25 Dec 2021 09:30:09 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-57/</guid>
      <description>問題へのリンク  Square root convergents  感想 この形式が連分数と呼ばれるのは浅学のため知らなかった。
求める項 $a_n$ は下記の形式で表せる。
$$ a_1 = 1 + \frac{1}{2}, \; a_n = 1 + \frac{1}{1+a_{n-1}} \enspace [n&amp;gt;1] $$
ここで $a_n = b_n / c_n$ とおけば、分子と分母をそれぞれ計算できる。</description>
    </item>
    
    <item>
      <title>Problem 56</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-56/</link>
      <pubDate>Sat, 25 Dec 2021 09:26:12 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-56/</guid>
      <description>問題へのリンク  Powerful digit sum  感想 Problem 55 と同じく、数が大きいだけの問題と思われる。各桁の数字の和が必要なので、 $a,b$ の二重ループでそれぞれ計算して比較するだけ。</description>
    </item>
    
    <item>
      <title>Problem 55</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-55/</link>
      <pubDate>Sat, 25 Dec 2021 09:22:04 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-55/</guid>
      <description>問題へのリンク  Lychrel numbers  感想 桁数が大きくなるため多倍長の整数演算が必要なだけ。素直に計算して判定する。</description>
    </item>
    
    <item>
      <title>Problem 54</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-54/</link>
      <pubDate>Sat, 25 Dec 2021 09:02:43 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-54/</guid>
      <description>問題へのリンク  Poker hands  感想 役のランクとランク内の強さをプログラム内で比較しやすいように実装するだけ。
問題のデータに含まれているか否かは確認していないが、ストレートは 5, 4, 3, 2, Ace の five-high straight と Ace, King, Queen, Jack, 10 の ace-high straight の 2 種類がある。これらの場合のランク内の強さを決める Ace の扱いが問題文に 明記されていないので five-high straight の強さはストレート内で最弱と仮定したが、 計算結果は正しいと認められた。</description>
    </item>
    
    <item>
      <title>Problem 53</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-53/</link>
      <pubDate>Sat, 25 Dec 2021 05:09:53 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-53/</guid>
      <description>問題へのリンク  Combinatoric selections  感想 素直に計算する以外の方法が思いつかない。同じ数の階乗計算が多数発生するので、 先に計算するなりメモ化するなりして計算量を節約する程度。</description>
    </item>
    
    <item>
      <title>Problem 52</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-52/</link>
      <pubDate>Sat, 25 Dec 2021 05:02:14 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-52/</guid>
      <description>問題へのリンク  Permuted multiples  感想 求める数を $x$ として、6 倍しても桁数が変わらないので捜索範囲を絞ることができる。
例えば 2 桁の場合、6 倍しても 2 桁になる $x$ の範囲は $10 \le x \le \lfloor (100-1)/6 \rfloor$。 2 桁で求める解が見つからない場合は $100 \le x \le \lfloor (1000-1)/6 \rfloor$ を捜索する。
さらに $x$ の最上位桁が 1 であることから、$x, 2x, 3x, 4x, 5x, 6x$ の最上位桁はそれぞれ異なった数字になる。 つまり $x$ は少なくとも 6 桁の数である。</description>
    </item>
    
    <item>
      <title>Problem 51</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-51/</link>
      <pubDate>Fri, 24 Dec 2021 23:33:23 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-51/</guid>
      <description>問題へのリンク  Prime digit replacements  感想 入れ替えた結果、8 個の素数の組が出来るという点が調査範囲の絞り込みに効いてくる。
 末尾 1 桁は入れ替え桁の対象外で、元の数字の桁数は入れ替える桁数よりも大きい 入れ替える桁数は 3 の倍数  入れ替える数字に必ず偶数が含まれることから前者は明らかなので、後者について説明する。
n 桁を入れ替えると仮定し、入れ替え対象桁の各桁の和を 3 を法とする 剰余で分類すると下記の通り。
$$ \begin{array}{ccc} \hline 数字 &amp;amp; 対象桁の和 &amp;amp; (mod \; 3) \\ \hline 0 &amp;amp; 0 &amp;amp; 0 \\ 1 &amp;amp; n &amp;amp; n \; mod \; 3 \\ 2 &amp;amp; 2n &amp;amp; 2n \; mod \; 3 \\ 3 &amp;amp; 3n &amp;amp; 0 \\ 4 &amp;amp; 4n &amp;amp; n \; mod \; 3 \\ 5 &amp;amp; 5n &amp;amp; 2n \; mod \; 3 \\ 6 &amp;amp; 6n &amp;amp; 0 \\ 7 &amp;amp; 7n &amp;amp; n \; mod \; 3 \\ 8 &amp;amp; 8n &amp;amp; 2n \; mod \; 3 \\ 9 &amp;amp; 9n &amp;amp; 0 \\ \hline \end{array} $$</description>
    </item>
    
    <item>
      <title>Problem 50</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-50/</link>
      <pubDate>Fri, 24 Dec 2021 12:41:26 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-50/</guid>
      <description>問題へのリンク  Consecutive prime sum  感想 求めるのは条件を満たす最長の素数列の和なので、素数列が長くなる可能性が 高いのは開始位置の数字が小さい、つまり 2 から始まる素数列から考えていくの がナイーブですが一般的な方針かと思います。
あとは具体的にどう実装するかですが、色々なやり方があるので特にコメント無し。</description>
    </item>
    
    <item>
      <title>Problem 49</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-49/</link>
      <pubDate>Fri, 24 Dec 2021 12:26:59 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-49/</guid>
      <description>問題へのリンク  Prime permutations  感想 素直に計算するしかないかと思いますが、求まった素数の差は 問題文に例示されている差 3300 と同じという結果が気になりました。
範囲を 5 桁に増やすと他の差も出てきますが、 似通った差が出やすいのは使える数字が制限されているからでしょうか。</description>
    </item>
    
    <item>
      <title>Problem 48</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-48/</link>
      <pubDate>Fri, 24 Dec 2021 11:28:14 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-48/</guid>
      <description>問題へのリンク  Self powers  感想 欲しいのは末尾 10 桁なので、足し算は $10^{10}$ で除算した余りで実施すれば良い。 また $n$ が 10 の倍数とすると $n^{n} \equiv 0 \enspace (mod \; 10^{10})$ なので、 10 の倍数を計算から除外すれば計算量を減らせる。
とはいえ $999^{999}$ は 64 bit を越えるので、多倍長の整数演算が不可の場合は 冪乗の計算時も剰余を取りながら実施する必要がある。</description>
    </item>
    
    <item>
      <title>Problem 47</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-47/</link>
      <pubDate>Fri, 24 Dec 2021 11:26:56 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-47/</guid>
      <description>問題へのリンク  Distinct primes factors  感想 前問に引き続き、素直に調べる以外の手段が思いつかない。</description>
    </item>
    
    <item>
      <title>Problem 46</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-46/</link>
      <pubDate>Fri, 24 Dec 2021 11:19:53 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-46/</guid>
      <description>問題へのリンク  Goldbach&amp;rsquo;s other conjecture  感想 反例が出るまで素直に調べる手しか無いように思われる。</description>
    </item>
    
    <item>
      <title>Problem 45</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problme-45/</link>
      <pubDate>Fri, 24 Dec 2021 11:09:08 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problme-45/</guid>
      <description>問題へのリンク  Triangular, pentagonal, and hexagonal  感想 $\forall x \in H_{n}, x \in T_{n}$ であることに気がつければ、 $H_{143}$ より大きい六角数のうち最初に五角数でもある数を見つければ終了。
五角数であることの確認方法は、前問(Problem 44)からそのまま流用できる。</description>
    </item>
    
    <item>
      <title>Problem 44</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-44/</link>
      <pubDate>Fri, 24 Dec 2021 08:09:35 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-44/</guid>
      <description>問題へのリンク  Pentagon numbers  感想 きちんと解くには少し工夫が必要な問題。 最小の $|P_{k}-P_{j}|$ であることをどう保証するかが鍵になる。
力技による方法 $j,k$ の組み合わせを小さい値から調べていくと、問題文の条件を満たす五角数 $P_{j}, P_{k}$ は 早期に見つかる。この時の差 $|P_{k}-P_{j}|$ を $P_{d}$ とする。
$P_{n}-P_{n-1} &amp;gt; P_{d}$ となるまで、差が $P_{d}$ より小さい五角数のペアが 存在するか否かを調べる。存在した場合は終了条件を更新して捜索を続ける。ところが この捜索範囲が非常に大きくなるため、適切な枝刈りをしないと計算に時間がかかる。 枝刈りさえすれば短い時間で終わる。
フォーラムを覗いたら、かなりの割合で最初の $P_{d}$ を見つけた時点で捜索終了している様子。 しかも $n$ に上限を決め打ち設定して開始する解法が多く見受けられました。 結果的に最初の $P_{d}$ が最小の $D = P_{d}$ になるのだが、これらは答えは正しいが解法は正しく ないパターンでした。
$P_{k}+P_{j}$ と $P_{d} = |P_{k}-P_{j}|$ の両方が五角数である $j,k$ を小さい方から探すときに $P_{d}$ も小さい順に見つかるという前提が不可な理由は、末尾の余談を参照のこと。
数式による方法 おそらく問題が期待している解法はこちらだと思われる。力技では「条件を満たす $P_{d}$ を 見つけてから最小であるか否かを確認」したが、発想を転換して「条件を満たす $P_{d}$ が 存在するには何が必要か」を考える。
具体的にはある $d$ に対して五角数 $P_{d} = |P_{k}-P_{j}| = P_{k}-P_{j}$ になる $j,k \enspace (k&amp;gt;j)$ が 存在すると仮定する。$P_{n}$ は単調増加なので $k-j&amp;lt;d$。そこで $x=k-j \;[0&amp;lt;x&amp;lt;d]$ とおいて $P_{d}=P_{j+x}-P_{j}$ を $j= \ldots$ の形に変形する。 このとき右辺は $P_{d}$ と $x$ から構成されている。 逆に $j$ を消して $k= \ldots$ の形でも構わないが、$k$ を消す方が単純な式になる。</description>
    </item>
    
    <item>
      <title>Problem 43</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-43/</link>
      <pubDate>Fri, 24 Dec 2021 07:58:57 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-43/</guid>
      <description>問題へのリンク  Sub-string divisibility  感想 実は紙と鉛筆で解ける問題。$d_{4}d_{5}d_{6} \equiv 0 \enspace (mod \; 5)$ なので $d_{6} = 0,5$ から 始めて最後は条件を満たす 6 個の数字を特定可能。
しかしながら上記の解法ロジックは汎用的ではないので、コンピュータで解を求めるには大人しく brute force で 調べるのが一番楽そう。まあ、論理である程度を篩い落としてから開始すれば計算量は減らせる。</description>
    </item>
    
    <item>
      <title>Problem 42</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-42/</link>
      <pubDate>Fri, 24 Dec 2021 07:55:34 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-42/</guid>
      <description>問題へのリンク  Coded triangle numbers  感想 素直に計算して調べるだけ。ファイルの形式は Problem 22 と同じなので、読み込み部分は使い回せる。</description>
    </item>
    
    <item>
      <title>Problem 41</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-41/</link>
      <pubDate>Fri, 24 Dec 2021 00:00:50 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-41/</guid>
      <description>問題へのリンク  Pandigital prime  感想 pandigital で素数という条件が効いてくる。
pandigital な n 桁の数字を足し合わせたものは下記のとおり。
$$\sum_{i=1}^n i$$
求めるのは最大の数で、問題文で 4 桁の例が示されているので $4 \le n \le 9$ で調べればよい。
$$ \begin{array}{ccc} \hline n &amp;amp; \sum_{i=1}^n i &amp;amp; mod \; 3 \\ \hline 4 &amp;amp; 10 &amp;amp; 1 \\ 5 &amp;amp; 15 &amp;amp; 0 \\ 6 &amp;amp; 21 &amp;amp; 0 \\ 7 &amp;amp; 28 &amp;amp; 1 \\ 8 &amp;amp; 36 &amp;amp; 0 \\ 9 &amp;amp; 45 &amp;amp; 0 \\ \hline \end{array} $$</description>
    </item>
    
    <item>
      <title>Problem 40</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-40/</link>
      <pubDate>Thu, 23 Dec 2021 23:40:09 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-40/</guid>
      <description>問題へのリンク  Champernowne&amp;rsquo;s constant  感想 問題の意味がよく理解できなくて、どういう意図があるのか悩んでしまった。 残念ながら思考力が足りず意図があるのか判らなかったので、大人しく調べます。
 0.123456789 | 10111213...979899 | 100101102...997998999 | 100010011002 ... --------- ----------------- --------------------- ---------------- len: 1 * 9 2 * 90 3 * 900 4 * 9000 ... 1 * 9 * 1 2 * 9 * 10 3 * 9 * 100 4 * 9 * 1000 ... block #1: 1-digit number block #2: 2-digit number block #3: 3-digit number ... block #n: n-digit number 1 桁の数から成るブロック、2 桁の数から成るブロック、続いて 3 桁の数から成るブロック、 というように小数点以下の数字が続く。この数値をタイトルにあるチャンパーノウン定数と 呼ぶそうだ。</description>
    </item>
    
    <item>
      <title>Problem 39</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-39/</link>
      <pubDate>Thu, 23 Dec 2021 21:53:39 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-39/</guid>
      <description>問題へのリンク  Integer right triangles  感想 直角三角形の三辺を $a \le b &amp;lt; c$ とする。$a+b+c=p$ より $a &amp;lt; p/3$。さらに、
$$ \begin{aligned} a^{2} + b^{2} &amp;amp;= (p-a-b)^{2} \\ &amp;amp;= p^{2} - 2ap - 2bp + a^{2} + 2ab + b^{2} \\ p^{2} - 2ap - 2bp + 2ab &amp;amp;= 0 \\ 2bp - 2ab &amp;amp;= p^{2} - 2ap \\ 2b(p-a) &amp;amp;= p^{2} - 2ap \\ b &amp;amp;= \frac{p^{2} - 2ap}{2(p-a)} \end{aligned} $$</description>
    </item>
    
    <item>
      <title>Problem 38</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-38/</link>
      <pubDate>Thu, 23 Dec 2021 19:47:43 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-38/</guid>
      <description>問題へのリンク  Pandigital multiples  感想 条件を整理してみる。
$x \enspace and \enspace (1,2,&amp;hellip;,n) \enspace [n &amp;gt; 1]$ が concatenated product になるには、$x$ の桁数を $m$ とすると下記の通り。
$$ \begin{array}{cl} \hline m &amp;amp; n \\ \hline 5以上 &amp;amp; 存在しない \\ 4 &amp;amp; 2 \\ 3 &amp;amp; 3 \\ 2 &amp;amp; 4 \\ 1 &amp;amp; 5, 9 \\ \hline \end{array} $$
$m=4, n=2$ の場合 $x$ は 4 桁、$2x$ は 5 桁。
$m=3, n=3$ の場合 $x, 2x, 3x$ は全て 3 桁。</description>
    </item>
    
    <item>
      <title>Problem 37</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-37/</link>
      <pubDate>Thu, 23 Dec 2021 18:32:06 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-37/</guid>
      <description>問題へのリンク  Truncatable primes  感想 左右どちらから取り除いても素数である必要があるので、正規表現で表すと以下の形式であることは truncatable primes であるための必要条件。
[2357][1379]*[37] 上記に従って小さい方から数値が条件を満たすか確認し、問題文から 11 個しか存在しないとのことなので 11 個出た時点で終了。</description>
    </item>
    
    <item>
      <title>Problem 36</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-36/</link>
      <pubDate>Thu, 23 Dec 2021 18:20:31 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-36/</guid>
      <description>問題へのリンク  Double-base palindromes  感想 しらみ潰しに探す手しか思い浮かばない。2 進数表記を文字列として扱うくらいか。</description>
    </item>
    
    <item>
      <title>Problem 35</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-35/</link>
      <pubDate>Thu, 23 Dec 2021 18:15:46 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-35/</guid>
      <description>問題へのリンク  Circular primes  感想 素直に計算するしかなさそう。
ある素数のどこかの桁に偶数の値や 5 が含まれていたら rotation した数字に素数でないものが存在する。 試してはいないが、これで枝刈りする処理を含めるのも良いかもしれない。</description>
    </item>
    
    <item>
      <title>Problem 34</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-34/</link>
      <pubDate>Thu, 23 Dec 2021 16:08:18 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-34/</guid>
      <description>問題へのリンク  Digit factorials  感想 Problem 30 と同様に、力技で調べるために範囲を絞り込む。
$x$ を n 桁の数字とすると、$x$ の各桁の階乗和の最大値は $n \cdot 9!$。
$$ \begin{aligned} 10^{n-1} &amp;amp;\le n \cdot 9! \\ n-1 &amp;amp;\le log_{10} (n \cdot 9!) \\ n-1 &amp;amp;\le log_{10} n + log_{10} 9! \\ n &amp;amp;\le log_{10} n + log_{10} 9! + 1 \end{aligned} $$
$n$ の値で調べてみると以下のようになり、不等式を満たす $n$ は $n \le 7$。
$$ \begin{array}{cl} \hline n &amp;amp; log_{10} n + log_{10} 9! + 1 \\ \hline 5 &amp;amp; 0.</description>
    </item>
    
    <item>
      <title>Problem 33</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-33/</link>
      <pubDate>Thu, 23 Dec 2021 14:12:20 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-33/</guid>
      <description>問題へのリンク  Digit cancelling fractions  感想 1 より小さいので $0&amp;lt;a&amp;lt;b \le 9$ で $a/b$ とし、$c$ を打ち消して $a/b$ となるのは下記の 4 通り。
 $(10a+c)/(10c+b) = a/b$ $(10a+c)/(10b+c) = a/b$ $(10c+a)/(10c+b) = a/b$ $(10c+a)/(10b+c) = a/b$  ケース 1 $$ \begin{aligned} 10ab + bc &amp;amp;= 10ac + ab \\ 9ab &amp;amp;= 10ac - bc \\ 9ab - 9ac &amp;amp;= ac -bc \\ 9a(b-c) &amp;amp;= c(a-b) \\ 9a(c-b) &amp;amp;= c(b-a) \end{aligned} $$
$a&amp;lt;b$ より $0&amp;lt;a&amp;lt;b&amp;lt;c \le 9$。</description>
    </item>
    
    <item>
      <title>Problem 32</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-32/</link>
      <pubDate>Thu, 23 Dec 2021 12:47:41 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-32/</guid>
      <description>問題へのリンク  Pandigital products  感想 問題文から multiplicand/multiplier は 4 桁以下であることが判る。5 桁以上の場合、 product も 5 桁以上となり 1 から 9 までの pandigital という条件と矛盾する。
以上より、可能性があるのは下記の 2 パターンとなる(product の重複は除くので muliplicand と multiplier が入れ替わるケースは除外している)。
 multiplicand が 1 桁、multiplier が 4 桁、product が 4 桁 multiplicand が 2 桁、multiplier が 3 桁、product が 4 桁  あとはループを回して乗算と pandigital な条件を満たす数字を探すか、 順列をもとに乗算の条件を満たす数値を探すかで解が求まる。</description>
    </item>
    
    <item>
      <title>Problem 31</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-31/</link>
      <pubDate>Thu, 23 Dec 2021 12:39:49 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-31/</guid>
      <description>問題へのリンク  Coin sums  感想 動的計画法(Dynamic Prgoramming)の基本的な問題です。</description>
    </item>
    
    <item>
      <title>Problem 30</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-30/</link>
      <pubDate>Thu, 23 Dec 2021 12:12:38 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-30/</guid>
      <description>問題へのリンク  Digit fifth powers  感想 最後は力技で計算して確認するが、その前に調べる範囲を制限する必要がある。
$n$ 桁の数字 $m$ に対して、各桁の 5 乗和を $x$ とすると
$$ \begin{aligned} n \cdot (1^{5}) &amp;amp;\le x \le n \cdot (9^{5}) \\ n &amp;amp;\le x \le 59049n \end{aligned} $$
$n=7$ の場合 $7 \le x \le 59049 \cdot 7 = 413343$となるが、$x=m$ を満たす $m$ を探すのが目的に対して $x \le 413343 &amp;lt; 10^{6} \le m &amp;lt; 10^{7}$ となり 条件を満たす $m$ は存在しない。つまり $n$ は 7 未満である。$n=6$ の場合は $6 \le x \le 59049 \cdot 6 = 354294$ で、さらに明らかに 1 桁の数字で条件を 満たすものは無いから $10 \le m \le 354294$ で条件を満たす $m$ を探せば良い。</description>
    </item>
    
    <item>
      <title>Problem 29</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-29/</link>
      <pubDate>Wed, 22 Dec 2021 20:36:03 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-29/</guid>
      <description>問題へのリンク  Distinct powers  感想 力技で数えれば解答は出るが、逆に重複する値を求めてみると上手いこと数えることが出来そうに見える。 力不足のため、この方針では解決できていませんが&amp;hellip;。
参考までに、下記に重複する値の一覧を示します。base と exponent の組み合わせです。
[(2, 4), (4, 2)] [(2, 6), (4, 3), (8, 2)] [(2, 8), (4, 4), (16, 2)] [(2, 9), (8, 3)] [(2, 10), (4, 5), (32, 2)] [(2, 12), (4, 6), (8, 4), (16, 3), (64, 2)] [(2, 14), (4, 7)] [(2, 15), (8, 5), (32, 3)] [(2, 16), (4, 8), (16, 4)] [(2, 18), (4, 9), (8, 6), (64, 3)] [(2, 20), (4, 10), (16, 5), (32, 4)] [(2, 21), (8, 7)] [(2, 22), (4, 11)] [(2, 24), (4, 12), (8, 8), (16, 6), (64, 4)] [(2, 25), (32, 5)] [(2, 26), (4, 13)] [(2, 27), (8, 9)] [(2, 28), (4, 14), (16, 7)] [(2, 30), (4, 15), (8, 10), (32, 6), (64, 5)] [(2, 32), (4, 16), (16, 8)] [(2, 33), (8, 11)] [(2, 34), (4, 17)] [(2, 35), (32, 7)] [(2, 36), (4, 18), (8, 12), (16, 9), (64, 6)] [(2, 38), (4, 19)] [(2, 39), (8, 13)] [(2, 40), (4, 20), (16, 10), (32, 8)] [(2, 42), (4, 21), (8, 14), (64, 7)] [(2, 44), (4, 22), (16, 11)] [(2, 45), (8, 15), (32, 9)] [(2, 46), (4, 23)] [(2, 48), (4, 24), (8, 16), (16, 12), (64, 8)] [(2, 50), (4, 25), (32, 10)] [(2, 51), (8, 17)] [(2, 52), (4, 26), (16, 13)] [(2, 54), (4, 27), (8, 18), (64, 9)] [(2, 55), (32, 11)] [(2, 56), (4, 28), (16, 14)] [(2, 57), (8, 19)] [(2, 58), (4, 29)] [(2, 60), (4, 30), (8, 20), (16, 15), (32, 12), (64, 10)] [(2, 62), (4, 31)] [(2, 63), (8, 21)] [(2, 64), (4, 32), (16, 16)] [(2, 65), (32, 13)] [(2, 66), (4, 33), (8, 22), (64, 11)] [(2, 68), (4, 34), (16, 17)] [(2, 69), (8, 23)] [(2, 70), (4, 35), (32, 14)] [(2, 72), (4, 36), (8, 24), (16, 18), (64, 12)] [(2, 74), (4, 37)] [(2, 75), (8, 25), (32, 15)] [(2, 76), (4, 38), (16, 19)] [(2, 78), (4, 39), (8, 26), (64, 13)] [(2, 80), (4, 40), (16, 20), (32, 16)] [(2, 81), (8, 27)] [(2, 82), (4, 41)] [(2, 84), (4, 42), (8, 28), (16, 21), (64, 14)] [(2, 85), (32, 17)] [(2, 86), (4, 43)] [(2, 87), (8, 29)] [(2, 88), (4, 44), (16, 22)] [(2, 90), (4, 45), (8, 30), (32, 18), (64, 15)] [(2, 92), (4, 46), (16, 23)] [(2, 93), (8, 31)] [(2, 94), (4, 47)] [(2, 95), (32, 19)] [(2, 96), (4, 48), (8, 32), (16, 24), (64, 16)] [(2, 98), (4, 49)] [(2, 99), (8, 33)] [(2, 100), (4, 50), (16, 25), (32, 20)] [(3, 4), (9, 2)] [(3, 6), (9, 3), (27, 2)] [(3, 8), (9, 4), (81, 2)] [(3, 9), (27, 3)] [(3, 10), (9, 5)] [(3, 12), (9, 6), (27, 4), (81, 3)] [(3, 14), (9, 7)] [(3, 15), (27, 5)] [(3, 16), (9, 8), (81, 4)] [(3, 18), (9, 9), (27, 6)] [(3, 20), (9, 10), (81, 5)] [(3, 21), (27, 7)] [(3, 22), (9, 11)] [(3, 24), (9, 12), (27, 8), (81, 6)] [(3, 26), (9, 13)] [(3, 27), (27, 9)] [(3, 28), (9, 14), (81, 7)] [(3, 30), (9, 15), (27, 10)] [(3, 32), (9, 16), (81, 8)] [(3, 33), (27, 11)] [(3, 34), (9, 17)] [(3, 36), (9, 18), (27, 12), (81, 9)] [(3, 38), (9, 19)] [(3, 39), (27, 13)] [(3, 40), (9, 20), (81, 10)] [(3, 42), (9, 21), (27, 14)] [(3, 44), (9, 22), (81, 11)] [(3, 45), (27, 15)] [(3, 46), (9, 23)] [(3, 48), (9, 24), (27, 16), (81, 12)] [(3, 50), (9, 25)] [(3, 51), (27, 17)] [(3, 52), (9, 26), (81, 13)] [(3, 54), (9, 27), (27, 18)] [(3, 56), (9, 28), (81, 14)] [(3, 57), (27, 19)] [(3, 58), (9, 29)] [(3, 60), (9, 30), (27, 20), (81, 15)] [(3, 62), (9, 31)] [(3, 63), (27, 21)] [(3, 64), (9, 32), (81, 16)] [(3, 66), (9, 33), (27, 22)] [(3, 68), (9, 34), (81, 17)] [(3, 69), (27, 23)] [(3, 70), (9, 35)] [(3, 72), (9, 36), (27, 24), (81, 18)] [(3, 74), (9, 37)] [(3, 75), (27, 25)] [(3, 76), (9, 38), (81, 19)] [(3, 78), (9, 39), (27, 26)] [(3, 80), (9, 40), (81, 20)] [(3, 81), (27, 27)] [(3, 82), (9, 41)] [(3, 84), (9, 42), (27, 28), (81, 21)] [(3, 86), (9, 43)] [(3, 87), (27, 29)] [(3, 88), (9, 44), (81, 22)] [(3, 90), (9, 45), (27, 30)] [(3, 92), (9, 46), (81, 23)] [(3, 93), (27, 31)] [(3, 94), (9, 47)] [(3, 96), (9, 48), (27, 32), (81, 24)] [(3, 98), (9, 49)] [(3, 99), (27, 33)] [(3, 100), (9, 50), (81, 25)] [(4, 51), (8, 34), (64, 17)] [(4, 52), (16, 26)] [(4, 54), (8, 36), (16, 27), (64, 18)] [(4, 55), (32, 22)] [(4, 56), (16, 28)] [(4, 57), (8, 38), (64, 19)] [(4, 58), (16, 29)] [(4, 60), (8, 40), (16, 30), (32, 24), (64, 20)] [(4, 62), (16, 31)] [(4, 63), (8, 42), (64, 21)] [(4, 64), (16, 32)] [(4, 65), (32, 26)] [(4, 66), (8, 44), (16, 33), (64, 22)] [(4, 68), (16, 34)] [(4, 69), (8, 46), (64, 23)] [(4, 70), (16, 35), (32, 28)] [(4, 72), (8, 48), (16, 36), (64, 24)] [(4, 74), (16, 37)] [(4, 75), (8, 50), (32, 30), (64, 25)] [(4, 76), (16, 38)] [(4, 78), (8, 52), (16, 39), (64, 26)] [(4, 80), (16, 40), (32, 32)] [(4, 81), (8, 54), (64, 27)] [(4, 82), (16, 41)] [(4, 84), (8, 56), (16, 42), (64, 28)] [(4, 85), (32, 34)] [(4, 86), (16, 43)] [(4, 87), (8, 58), (64, 29)] [(4, 88), (16, 44)] [(4, 90), (8, 60), (16, 45), (32, 36), (64, 30)] [(4, 92), (16, 46)] [(4, 93), (8, 62), (64, 31)] [(4, 94), (16, 47)] [(4, 95), (32, 38)] [(4, 96), (8, 64), (16, 48), (64, 32)] [(4, 98), (16, 49)] [(4, 99), (8, 66), (64, 33)] [(4, 100), (16, 50), (32, 40)] [(5, 4), (25, 2)] [(5, 6), (25, 3)] [(5, 8), (25, 4)] [(5, 10), (25, 5)] [(5, 12), (25, 6)] [(5, 14), (25, 7)] [(5, 16), (25, 8)] [(5, 18), (25, 9)] [(5, 20), (25, 10)] [(5, 22), (25, 11)] [(5, 24), (25, 12)] [(5, 26), (25, 13)] [(5, 28), (25, 14)] [(5, 30), (25, 15)] [(5, 32), (25, 16)] [(5, 34), (25, 17)] [(5, 36), (25, 18)] [(5, 38), (25, 19)] [(5, 40), (25, 20)] [(5, 42), (25, 21)] [(5, 44), (25, 22)] [(5, 46), (25, 23)] [(5, 48), (25, 24)] [(5, 50), (25, 25)] [(5, 52), (25, 26)] [(5, 54), (25, 27)] [(5, 56), (25, 28)] [(5, 58), (25, 29)] [(5, 60), (25, 30)] [(5, 62), (25, 31)] [(5, 64), (25, 32)] [(5, 66), (25, 33)] [(5, 68), (25, 34)] [(5, 70), (25, 35)] [(5, 72), (25, 36)] [(5, 74), (25, 37)] [(5, 76), (25, 38)] [(5, 78), (25, 39)] [(5, 80), (25, 40)] [(5, 82), (25, 41)] [(5, 84), (25, 42)] [(5, 86), (25, 43)] [(5, 88), (25, 44)] [(5, 90), (25, 45)] [(5, 92), (25, 46)] [(5, 94), (25, 47)] [(5, 96), (25, 48)] [(5, 98), (25, 49)] [(5, 100), (25, 50)] [(6, 4), (36, 2)] [(6, 6), (36, 3)] [(6, 8), (36, 4)] [(6, 10), (36, 5)] [(6, 12), (36, 6)] [(6, 14), (36, 7)] [(6, 16), (36, 8)] [(6, 18), (36, 9)] [(6, 20), (36, 10)] [(6, 22), (36, 11)] [(6, 24), (36, 12)] [(6, 26), (36, 13)] [(6, 28), (36, 14)] [(6, 30), (36, 15)] [(6, 32), (36, 16)] [(6, 34), (36, 17)] [(6, 36), (36, 18)] [(6, 38), (36, 19)] [(6, 40), (36, 20)] [(6, 42), (36, 21)] [(6, 44), (36, 22)] [(6, 46), (36, 23)] [(6, 48), (36, 24)] [(6, 50), (36, 25)] [(6, 52), (36, 26)] [(6, 54), (36, 27)] [(6, 56), (36, 28)] [(6, 58), (36, 29)] [(6, 60), (36, 30)] [(6, 62), (36, 31)] [(6, 64), (36, 32)] [(6, 66), (36, 33)] [(6, 68), (36, 34)] [(6, 70), (36, 35)] [(6, 72), (36, 36)] [(6, 74), (36, 37)] [(6, 76), (36, 38)] [(6, 78), (36, 39)] [(6, 80), (36, 40)] [(6, 82), (36, 41)] [(6, 84), (36, 42)] [(6, 86), (36, 43)] [(6, 88), (36, 44)] [(6, 90), (36, 45)] [(6, 92), (36, 46)] [(6, 94), (36, 47)] [(6, 96), (36, 48)] [(6, 98), (36, 49)] [(6, 100), (36, 50)] [(7, 4), (49, 2)] [(7, 6), (49, 3)] [(7, 8), (49, 4)] [(7, 10), (49, 5)] [(7, 12), (49, 6)] [(7, 14), (49, 7)] [(7, 16), (49, 8)] [(7, 18), (49, 9)] [(7, 20), (49, 10)] [(7, 22), (49, 11)] [(7, 24), (49, 12)] [(7, 26), (49, 13)] [(7, 28), (49, 14)] [(7, 30), (49, 15)] [(7, 32), (49, 16)] [(7, 34), (49, 17)] [(7, 36), (49, 18)] [(7, 38), (49, 19)] [(7, 40), (49, 20)] [(7, 42), (49, 21)] [(7, 44), (49, 22)] [(7, 46), (49, 23)] [(7, 48), (49, 24)] [(7, 50), (49, 25)] [(7, 52), (49, 26)] [(7, 54), (49, 27)] [(7, 56), (49, 28)] [(7, 58), (49, 29)] [(7, 60), (49, 30)] [(7, 62), (49, 31)] [(7, 64), (49, 32)] [(7, 66), (49, 33)] [(7, 68), (49, 34)] [(7, 70), (49, 35)] [(7, 72), (49, 36)] [(7, 74), (49, 37)] [(7, 76), (49, 38)] [(7, 78), (49, 39)] [(7, 80), (49, 40)] [(7, 82), (49, 41)] [(7, 84), (49, 42)] [(7, 86), (49, 43)] [(7, 88), (49, 44)] [(7, 90), (49, 45)] [(7, 92), (49, 46)] [(7, 94), (49, 47)] [(7, 96), (49, 48)] [(7, 98), (49, 49)] [(7, 100), (49, 50)] [(8, 35), (32, 21)] [(8, 45), (32, 27)] [(8, 55), (32, 33)] [(8, 65), (32, 39)] [(8, 68), (16, 51), (64, 34)] [(8, 70), (32, 42), (64, 35)] [(8, 72), (16, 54), (64, 36)] [(8, 74), (64, 37)] [(8, 75), (32, 45)] [(8, 76), (16, 57), (64, 38)] [(8, 78), (64, 39)] [(8, 80), (16, 60), (32, 48), (64, 40)] [(8, 82), (64, 41)] [(8, 84), (16, 63), (64, 42)] [(8, 85), (32, 51)] [(8, 86), (64, 43)] [(8, 88), (16, 66), (64, 44)] [(8, 90), (32, 54), (64, 45)] [(8, 92), (16, 69), (64, 46)] [(8, 94), (64, 47)] [(8, 95), (32, 57)] [(8, 96), (16, 72), (64, 48)] [(8, 98), (64, 49)] [(8, 100), (16, 75), (32, 60), (64, 50)] [(9, 51), (27, 34)] [(9, 52), (81, 26)] [(9, 54), (27, 36), (81, 27)] [(9, 56), (81, 28)] [(9, 57), (27, 38)] [(9, 58), (81, 29)] [(9, 60), (27, 40), (81, 30)] [(9, 62), (81, 31)] [(9, 63), (27, 42)] [(9, 64), (81, 32)] [(9, 66), (27, 44), (81, 33)] [(9, 68), (81, 34)] [(9, 69), (27, 46)] [(9, 70), (81, 35)] [(9, 72), (27, 48), (81, 36)] [(9, 74), (81, 37)] [(9, 75), (27, 50)] [(9, 76), (81, 38)] [(9, 78), (27, 52), (81, 39)] [(9, 80), (81, 40)] [(9, 81), (27, 54)] [(9, 82), (81, 41)] [(9, 84), (27, 56), (81, 42)] [(9, 86), (81, 43)] [(9, 87), (27, 58)] [(9, 88), (81, 44)] [(9, 90), (27, 60), (81, 45)] [(9, 92), (81, 46)] [(9, 93), (27, 62)] [(9, 94), (81, 47)] [(9, 96), (27, 64), (81, 48)] [(9, 98), (81, 49)] [(9, 99), (27, 66)] [(9, 100), (81, 50)] [(10, 4), (100, 2)] [(10, 6), (100, 3)] [(10, 8), (100, 4)] [(10, 10), (100, 5)] [(10, 12), (100, 6)] [(10, 14), (100, 7)] [(10, 16), (100, 8)] [(10, 18), (100, 9)] [(10, 20), (100, 10)] [(10, 22), (100, 11)] [(10, 24), (100, 12)] [(10, 26), (100, 13)] [(10, 28), (100, 14)] [(10, 30), (100, 15)] [(10, 32), (100, 16)] [(10, 34), (100, 17)] [(10, 36), (100, 18)] [(10, 38), (100, 19)] [(10, 40), (100, 20)] [(10, 42), (100, 21)] [(10, 44), (100, 22)] [(10, 46), (100, 23)] [(10, 48), (100, 24)] [(10, 50), (100, 25)] [(10, 52), (100, 26)] [(10, 54), (100, 27)] [(10, 56), (100, 28)] [(10, 58), (100, 29)] [(10, 60), (100, 30)] [(10, 62), (100, 31)] [(10, 64), (100, 32)] [(10, 66), (100, 33)] [(10, 68), (100, 34)] [(10, 70), (100, 35)] [(10, 72), (100, 36)] [(10, 74), (100, 37)] [(10, 76), (100, 38)] [(10, 78), (100, 39)] [(10, 80), (100, 40)] [(10, 82), (100, 41)] [(10, 84), (100, 42)] [(10, 86), (100, 43)] [(10, 88), (100, 44)] [(10, 90), (100, 45)] [(10, 92), (100, 46)] [(10, 94), (100, 47)] [(10, 96), (100, 48)] [(10, 98), (100, 49)] [(10, 100), (100, 50)] [(16, 55), (32, 44)] [(16, 65), (32, 52)] [(16, 70), (32, 56)] [(16, 78), (64, 52)] [(16, 80), (32, 64)] [(16, 81), (64, 54)] [(16, 84), (64, 56)] [(16, 85), (32, 68)] [(16, 87), (64, 58)] [(16, 90), (32, 72), (64, 60)] [(16, 93), (64, 62)] [(16, 95), (32, 76)] [(16, 96), (64, 64)] [(16, 99), (64, 66)] [(16, 100), (32, 80)] [(27, 68), (81, 51)] [(27, 72), (81, 54)] [(27, 76), (81, 57)] [(27, 80), (81, 60)] [(27, 84), (81, 63)] [(27, 88), (81, 66)] [(27, 92), (81, 69)] [(27, 96), (81, 72)] [(27, 100), (81, 75)] [(32, 66), (64, 55)] [(32, 78), (64, 65)] [(32, 84), (64, 70)] [(32, 90), (64, 75)] [(32, 96), (64, 80)] </description>
    </item>
    
    <item>
      <title>Problem 28</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-28/</link>
      <pubDate>Wed, 22 Dec 2021 20:31:19 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-28/</guid>
      <description>問題へのリンク  Number spiral diagonals  感想 この四角形は平方数になるので、図の右上の要素は $(2n+1)^{2} \enspace [n \ge 0]$ になる。 あとは、ここから残りの三隅の値を求められる。</description>
    </item>
    
    <item>
      <title>Problem 27</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-27/</link>
      <pubDate>Wed, 22 Dec 2021 20:07:28 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-27/</guid>
      <description>問題へのリンク  Quadratic primes  感想 ある程度、範囲を絞り込める。
$n=0$ の場合から b は素数でなければならない。同様に $n=1$ の場合から $1+a+b$ も素数になる。 $x=1+a+b$ とおくと $a=x-b-1$ となるので $|x-b-1| &amp;lt; 1000$。$2 \le b &amp;lt; 1000$ より $0 &amp;lt; x &amp;lt; 2000$。
あとは 1000 以下の素数 $b$ と 2000 未満の素数 $x$ から求められる条件を満たす $a$ の組み合わせにおいて、 式 $n^{2}+an+b$ で素数がどれだけ続くかを確認すれば良い。</description>
    </item>
    
    <item>
      <title>Problem 26</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-26/</link>
      <pubDate>Wed, 22 Dec 2021 16:05:02 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-26/</guid>
      <description>問題へのリンク  Reciprocal cycles  感想 何も考えずにするならば、$d$ で割った余りに同じ数値が出てくるまでを繰り返すだけ。
Wikipedia の循環小数の記述を読むと、 $d$ を因数分解して 2 または 5 の素数しか含まれていない場合は $1/d$ は有限小数、 $d$ が 2, 5 以外の素数 $p$ なら循環節の長さは $p-1$ の約数という決まりがある模様。
私は理解できていないので大人しく調べるのが分相応のようです。</description>
    </item>
    
    <item>
      <title>Problem 25</title>
      <link>https://kwj.github.io/project-euler/ja/pm/prpblem-25/</link>
      <pubDate>Wed, 22 Dec 2021 16:01:34 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/prpblem-25/</guid>
      <description>問題へのリンク  1000-digit Fibonacci number  感想 素直に計算する以外の手段があれば知りたい。</description>
    </item>
    
    <item>
      <title>Problem 24</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-24/</link>
      <pubDate>Wed, 22 Dec 2021 15:24:23 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-24/</guid>
      <description>問題へのリンク  Lexicographic permutations  感想 辞書順で返してくれる順列がライブラリ等にあれば 100 万回ぶん回すのも手段の一つですが、 せっかくの辞書順なので素直に考えてみます。
順列の総数は $10! = 3628800$ なので、辞書順ならば最初が 0 から始まるのが $9! = 362880$ 個、 次に 1 から始まるのが 362880 個という形になる。つまり $1000000 / 362880 = 2.75&amp;hellip;$ なので 問題の順列は 3 番目の 2 から始まることが判る。次は 2 を除いた $0, 1, 3, 4, 5, 6, 7, 8, 9$ で始まるのが $8! = 40320$ ずつあるので、$1000000 \equiv 27420 \enspace (mod \; 362880)$ から 274240 番目は $274240 / 40320 = 6.80&amp;hellip;$ となり 7 番目の 7 から始まることが判る。以下、繰り返し。</description>
    </item>
    
    <item>
      <title>Problem 23</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-23/</link>
      <pubDate>Wed, 22 Dec 2021 15:15:24 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-23/</guid>
      <description>問題へのリンク  Non-abundant sums  感想 abundant number の判定に使う式は Problem 21 で使った $d(n)$ であることを思い出せれば、 あとは調べ上げて終了です。</description>
    </item>
    
    <item>
      <title>Problem 22</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-22/</link>
      <pubDate>Wed, 22 Dec 2021 14:58:43 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-22/</guid>
      <description>問題へのリンク  Names scores  感想 文字と数値の対応が取れれば簡単。いまは ASCII コードが前提なので難しく考える必要はないですね。
そういえばアルファベットが非連続な文字符号化があった筈と 記憶を探ってみたら EBCDIC だった。 メインフレームの内部ではまだ使われているようで、さすがはメインフレーム。</description>
    </item>
    
    <item>
      <title>Problem 21</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-21/</link>
      <pubDate>Wed, 22 Dec 2021 14:40:48 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-21/</guid>
      <description>問題へのリンク  Amicable numbers  感想 Problem 12 で三角数の約数を扱いましたが、今度は約数の和を計算するだけです。 ただし本問の $d(n)$ は自分自身 $n$ を含めていないので、そこは注意が必要になります。
問題文では $a,b$ は異なる数になっているので、$a=b$ で条件を満たすものがあるかなと確認してみたら存在していた。 そうだ $a=b$ なら完全数であって 6 は有名なのに、まったく思い至らなかった自分が情けない。
&amp;gt;&amp;gt;&amp;gt; [x for x in range(1,1001) if d(x) == x] [6, 28, 496] </description>
    </item>
    
    <item>
      <title>Problem 20</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-20/</link>
      <pubDate>Wed, 22 Dec 2021 14:38:22 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-20/</guid>
      <description>問題へのリンク  Factorial digit sum  感想 Problem 16 と同じで、これも各桁の数字が必要なので素直に計算するしかないと思います。</description>
    </item>
    
    <item>
      <title>Problem 19</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-19/</link>
      <pubDate>Wed, 22 Dec 2021 14:24:43 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-19/</guid>
      <description>問題へのリンク  Counting Sundays  感想 カレンダーのライブラリがあれば何も考えずに済みますが、せっかくなので問題文の意図に沿ってみます。
1 Jan 1900 を初日として、これがが月曜日なら 1900 年は平年なので 1 Jan 1901 は $ (1 + 365) \equiv 2 \enspace (mod \; 7)$ で火曜日。 あとは 1 Dec 2000 まで各月の日数を累積で足していきながら剰余演算で月初めの曜日を判定すれば終了。</description>
    </item>
    
    <item>
      <title>Problem 18</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-18/</link>
      <pubDate>Wed, 22 Dec 2021 14:09:28 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-18/</guid>
      <description>問題へのリンク  Maximum path sum I  感想 バックトラッキングを使って上から探すと処理が面倒なので、単純に下から畳み込むに限ります。
 ... 70 ... 91 72 ... 63 66 04 68 89 53 67 30 73 16 69 87 40 31 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23 これが、こうなる。
 ... 70 ... 91 72 ... 125 164 102 95 112 123 165 128 166 109 122 147 100 54 一番左側の 125 の項で説明すると、最下段の 2 つの項 04 と 62 を 比較して大きい方(62)を下から二段目の一番左側の項(63)に加算した ものです。あとは最上段まで繰り返して項が 1 個になったら、それが 求める解答です。</description>
    </item>
    
    <item>
      <title>Problem 17</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-17/</link>
      <pubDate>Wed, 22 Dec 2021 13:58:52 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-17/</guid>
      <description>問題へのリンク  Number letter counts  感想 指定された範囲内で数え上げるだけ。数字を英語で表記する時の仕方で条件分けができれば易しいと思います。
 1000 の場合 20 未満の場合 100 未満の場合 100 の倍数の場合 下 2 桁が 20 未満の場合 その他(下 2 桁が 20 以上 99 以下)  上から順に条件に一致するかを調べて処理しました。</description>
    </item>
    
    <item>
      <title>Problem 16</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-16/</link>
      <pubDate>Wed, 22 Dec 2021 13:49:03 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-16/</guid>
      <description>問題へのリンク  Power digit sum  感想 各桁の数字が必要な訳で、素直に計算するしかなさげ。
$2^{1000} = (2^{10})^{100} = 1024^{100} \approx (10^{3})^{100}$ だから 300 桁ちょいの値ですか。 最近は紙の裏ではなく Python を電卓代わりに計算することが多いです。
&amp;gt;&amp;gt;&amp;gt; math.log10(2**1000) 301.0299956639812 </description>
    </item>
    
    <item>
      <title>Problem 15</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-15/</link>
      <pubDate>Wed, 22 Dec 2021 13:19:26 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-15/</guid>
      <description>問題へのリンク  Lattice paths  感想 これは組み合わせの問題。
スタートからゴールまで 40 回の選択があり、選択は右向き 20 個、下向き 20 個から始めて一つずつ選んでいく。 仮に要素 40 個の配列があるとして、ここから 20 個を選んで右向きで埋めると残りの 20 個が下向きとなり経路が一意に定まる。 つまり 40 個の中から 20 個を選ぶ組み合わせの数が求める答えになる。もはや答えそのものの記述ですが、ご容赦ください。
余談 そういえば Lattice C ってコンパイラがありましたね。</description>
    </item>
    
    <item>
      <title>Problem 14</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-14/</link>
      <pubDate>Wed, 22 Dec 2021 12:43:12 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-14/</guid>
      <description>問題へのリンク  Longest Collatz sequence  感想 100 万未満の数をすべて調べる必要があるが、途中で辿った数も記録して キャッシュとして利用すれば計算量を減らせる。
$$ \begin{array}{ccccccccccc} \hline number &amp;amp; 13 &amp;amp; 40 &amp;amp; 20 &amp;amp; 10 &amp;amp; 5 &amp;amp; 16 &amp;amp; 8 &amp;amp; 4 &amp;amp; 2 &amp;amp; 1 \\ chain &amp;amp; 10 &amp;amp; 9 &amp;amp; 8 &amp;amp; 7 &amp;amp; 6 &amp;amp; 5 &amp;amp; 4 &amp;amp; 3 &amp;amp; 2 &amp;amp; 1 \\ \hline \end{array} $$
この場合、下記の 2 点に注意が必要。
 100 万以上の数は記録不要 辿っている途中で既に記録がある数値に出会った時の処理  上記の 13 から開始した場合の記録があるとすると、例えば 80 から開始したら 40 で $chain = 9$ という 記録が出てくるので、80 は $chain = 10$ として処理する。</description>
    </item>
    
    <item>
      <title>Problem 13</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-13/</link>
      <pubDate>Wed, 22 Dec 2021 12:26:12 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-13/</guid>
      <description>問題へのリンク  Large sum  感想 下 10 桁ではなく上 10 桁なので、素直に計算するしかない。
50 桁の数字は 160 bit を越えるので、多倍長整数が仕様に含まれるプログラミング言語を使うか、 仕様には無くても対応ライブラリがあれば使うのが楽。
&amp;gt;&amp;gt;&amp;gt; math.log2(10**49) 162.77447664948076 どちらも無い場合は自分で実装する必要がある。加算なら比較的簡単だけど減算や乗算/余算になると面倒なので、 実績のあるライブラリを使うのが吉。</description>
    </item>
    
    <item>
      <title>Problem 12</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-12/</link>
      <pubDate>Wed, 22 Dec 2021 11:51:42 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-12/</guid>
      <description>問題へのリンク  Highly divisible triangular number  感想 三角数の約数を数えるだけ。
ある数 $m$ について、$1 \le a \le \lfloor m / 2 \rfloor$ ではなく $1 \le a \le \lfloor \sqrt{m} \rfloor$ の範囲で割れるか否かを確認すればよい。 28 を例にすると $\lfloor \sqrt{m} \rfloor = 5$ だから、下記のように $6$ 個になる。 $$ \begin{aligned} 1 \cdot 28 &amp;amp;= 28 \\ 2 \cdot 14 &amp;amp;= 28 \\ 4 \cdot 7 &amp;amp;= 28 \end{aligned}$$ この方式の場合 $m$ が平方数のときの数え上げに注意。三角数ではないが $m=144$ なら $13$ 個になる。 $$ \begin{aligned} 1 \cdot 144 &amp;amp;= 144 \\ 2 \cdot 72 &amp;amp;= 144 \\ 4 \cdot 38 &amp;amp;= 144 \\ 6 \cdot 24 &amp;amp;= 144 \\ 8 \cdot 18 &amp;amp;= 144 \\ 9 \cdot 16 &amp;amp;= 144 \\ 12 \cdot 12 &amp;amp;= 144 \\ \end{aligned}$$</description>
    </item>
    
    <item>
      <title>Problem 11</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-11/</link>
      <pubDate>Wed, 22 Dec 2021 11:49:58 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-11/</guid>
      <description>問題へのリンク  Largest product in a grid  感想 上下、左右、斜め2方向を見落としなく処理するだけ。</description>
    </item>
    
    <item>
      <title>Problem 10</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-10/</link>
      <pubDate>Tue, 21 Dec 2021 22:57:55 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-10/</guid>
      <description>問題へのリンク  Summation of primes  感想 これも素直に解くだけ。 ただし対象範囲が200万未満と広くなっており、ナイーブに素数判定をしていたら時間がかかる。 エラトステネスの篩で判定用テーブルを作成した方がよい。</description>
    </item>
    
    <item>
      <title>Problem 9</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-9/</link>
      <pubDate>Tue, 21 Dec 2021 21:37:20 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-9/</guid>
      <description>問題へのリンク  Special Pythagorean triplet  感想 三重ループを回すか、ピタゴラス数の性質を利用して解く。
三重ループ $a&amp;lt;b&amp;lt;c$ の制約を付ければ、$a$ の範囲は $0&amp;lt;a\le332$ に絞られる。
ピタゴラス数の性質 Euclid&amp;rsquo;s formulaと呼ばれているピタゴラス数を生成する公式を使えばよい。 $m$, $n$, $k$ は正の整数で $m&amp;gt;n$、$m$ と $n$ はどちらかが偶数かつ互いに素の場合は下記が成立する。 $$ a=k(m^{2}-n^{2}), \: b=k(2mn), \: c=k(m^{2}+n^{2}) $$ 問題文から $a+b+c=k \cdot 2m(m+n) = 1000$ が導かれるので、$k, \: m, \: m+n$ は500の約数であることがわかる。 さらに $m&amp;gt;n$ より$m+n&amp;lt;2m$ や $m$ の最大値も $\lceil \sqrt{1000 / 2} \rceil - 1$ なので、 これらの制約を満たす$m$, $n$, $k$ を探せば三重ループよりは効率良く解ける。</description>
    </item>
    
    <item>
      <title>Problem 8</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-8/</link>
      <pubDate>Tue, 21 Dec 2021 21:34:40 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-8/</guid>
      <description>問題へのリンク  Largest product in a series  感想 これも素直に解くだけ。 1000桁を数字で扱うと厳しいため、いったん文字列で処理して計算対象となるデータを抽出すればよい。</description>
    </item>
    
    <item>
      <title>Problem 7</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-7/</link>
      <pubDate>Tue, 21 Dec 2021 21:33:10 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-7/</guid>
      <description>問題へのリンク  10001st prime  感想 前問に引き続いて素直に解くだけ。</description>
    </item>
    
    <item>
      <title>Problem 6</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-6/</link>
      <pubDate>Tue, 21 Dec 2021 21:28:45 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-6/</guid>
      <description>問題へのリンク  Sum square difference  感想 まだ準備運動なので素直に解くだけ。</description>
    </item>
    
    <item>
      <title>Problem 5</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-5/</link>
      <pubDate>Tue, 21 Dec 2021 19:58:43 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-5/</guid>
      <description>問題へのリンク  Smallest multiple  感想 問題内容が最小公倍数(least common multiple)そのものです。 $$ lcm(a,b) = \frac{|ab|}{gcd(a,b)} $$</description>
    </item>
    
    <item>
      <title>Problem 4</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-4/</link>
      <pubDate>Tue, 21 Dec 2021 19:48:06 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-4/</guid>
      <description>問題へのリンク  Largest palindrome product  感想 回文数。3桁の数の積の最大値($999 \cdot 999 = 998001$)から小さい方に向かって、 回文数のチェック後に条件を満たす積か否かを確認するのが一番簡単だと思います。</description>
    </item>
    
    <item>
      <title>Problem 3</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-3/</link>
      <pubDate>Tue, 21 Dec 2021 17:10:38 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-3/</guid>
      <description>問題へのリンク  Largest prime factor  感想 単純に素因数分解するだけ。
扱う数が 32 bit を越えており、2021 年時点で 64 bit 環境が主流で助かった。
&amp;gt;&amp;gt;&amp;gt; import math &amp;gt;&amp;gt;&amp;gt; math.log2(600851475143) 39.1282174580652 </description>
    </item>
    
    <item>
      <title>Problem 2</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-2/</link>
      <pubDate>Tue, 21 Dec 2021 09:17:50 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-2/</guid>
      <description>問題へのリンク  Even Fibonacci numbers  感想 偶数の値を持つ項を指定している理由は何だろうか。
$F(n)$ を問題のフィボナッチ数列とする。
$$ \begin{aligned}F(1) &amp;amp;= 1, \; F(2) = 2 \\ F(n) &amp;amp;= F(n-1)+F(n-2) \; [n &amp;gt; 2] \end{aligned}$$ 偶数$(E)$/奇数$(O)$で見ると、以下の通り。 $$ F(1) = O \\ F(2) = E \\ F(3) = O \\ F(4) = O \\ F(5) = E \\ F(6) = O \\ F(7) = O \\ F(8) = E \\ F(9) = O \\ \ldots $$
$n=2,5,8, &amp;hellip;$ のときに $F(n)$ は偶数となるので、 $F(n)$ と $F(n-3), F(n-6)$ の漸化式を示せれば偶数の値を持つ項のみ数え上げ可能。 今回は条件を満たす項が11個しかないので、複雑なことはせずナイーブに処理するのが良いのかもしれない。</description>
    </item>
    
    <item>
      <title>Problem 1</title>
      <link>https://kwj.github.io/project-euler/ja/pm/problem-1/</link>
      <pubDate>Mon, 20 Dec 2021 22:16:51 -0800</pubDate>
      
      <guid>https://kwj.github.io/project-euler/ja/pm/problem-1/</guid>
      <description>問題へのリンク  Multiples of 3 or 5  感想 注意すべき点は15（3と5の最小公倍数）の倍数についての扱い方。
 二重計上しないように対象の数を列挙してから和を計算 3の倍数の和と5の倍数の和を足したものから15の倍数の和を減算  今回は上限も低いしナイーブに数え上げても $ O(n) $ なので、フィルタ系の機能が使えれば前者は容易に実装可能。 後者の場合は等差数列の和で計算できる。</description>
    </item>
    
  </channel>
</rss>
